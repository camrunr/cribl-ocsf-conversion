output: default
streamtags:
  - ocsf
  - authentication
  - okta
  - v1.3.0
groups: {}
asyncFuncTimeout: 1000
functions:
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Parse raw and put into parsed field
  - id: serde
    filter: "true"
    disabled: null
    conf:
      mode: extract
      type: json
      srcField: _raw
      dstField: parsed
      fieldFilterExpr: value !== '' && value !== null
    final: false
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Flatten parsed field
  - id: flatten
    filter: "true"
    disabled: null
    conf:
      fields:
        - parsed
      prefix: ""
      depth: 10
      delimiter: .
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Match flattened field names to those in the C.var dictionary, rename
        and unflatten them
  - id: code
    filter: "true"
    disabled: null
    conf:
      maxNumOfIterations: 5000
      activeLogSampleRate: 1
      useUniqueLogChannel: true
      code: >-
        // this function takes the flattened field names

        // looks them up in the specified Global Variable (Knowledge -> Global Variables)

        // renames them accordingly

        // and finally unflattens them into ocsf{}


        // update this to reflect the conversion you want

        const gv = C.vars.ocsf_3002_okta_system_authentication


        const debug = false

        function unflatten(data) {
          var result = {}
          for (var i in data) {
            var keys = i.split('.')
            keys.reduce(function(r, e, j) {
              return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])
            }, result)
          }
          return result
        }



        try {
           __e.ocsf = {}
           debug && (__e.debug = [])
           for (let [name, value] of Object.entries(__e)) {
              debug && __e.debug.push(name)
              if (name.startsWith('parsed.')) {
                 let old_name = name.slice(7)
                 let new_name = gv[old_name]
                 debug && __e.debug.push(`map: ${old_name} -> ${new_name}`)
                 if (new_name) {
                    __e.ocsf[new_name] = value
                    delete __e[name]
                 } else {
                    __e.ocsf[`unmapped.extras.${old_name}`] = value
                    delete __e[name]
                 }
              }
           }
           // now unflatten the result
           Object.assign(__e,unflatten(__e.ocsf))
           delete __e.ocsf
        } catch (err) {
           __e.CRIBLERR = err.toString()
        }
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Make sure time is a number
  - id: auto_timestamp
    filter: "true"
    disabled: null
    conf:
      srcField: time
      dstField: time
      defaultTimezone: local
      timeExpression: time.getTime() / 1000
      offset: 0
      maxLen: 150
      defaultTime: now
      latestDateAllowed: +1week
      earliestDateAllowed: -420weeks
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: Fix-up required fields and types
  - id: eval
    filter: "true"
    disabled: null
    conf:
      remove:
        - _raw
        - _time
        - cribl*
      add:
        - disabled: false
          name: time
          value: Math.round(time,0)
        - disabled: false
          name: logon_type_id
          value: |-
            {
                "system": 1,
                "interactive": 2,
                "network": 3,
                "batch": 4,
                "os": 5,
                "unlock": 7,
                "network_clear": 8,
                "new_creds": 9,
                "remote_interactive": 10,
                "cached_interactive": 11,
                "cached_unlock": 13
            }[logon_type.toLowerCase()] || 99
        - disabled: false
          name: src_endpoint.os.type_id
          value: |-
            src_endpoint.os.type_id ? src_endpoint.os.type_id : {
                "unknown": 0,
                "other": 99,
                "windows": 100,
                "windows_mobile": 101,
                "linux": 200,
                "android": 201,
                "macos": 300,
                "ios": 301,
                "ipados": 302,
                "solaris": 400,
                "aix": 401,
                "hpux": 402

            }[src_endpoint.os.type.toLowerCase()] || 0
        - disabled: false
          name: metadata.product.vendor_name
          value: 'metadata.product.vendor_name ? metadata.product.vendor_name : "unknown"'
        - disabled: false
          name: metadata.version
          value: 'metadata.version ? metadata.version : "1.3.0"'
        - disabled: false
          name: activity_id
          value: |-
            {
                logon: 1,
                logoff: 2,
                auth_ticket: 3,
                service_ticket: 4,
                service_ticket_renew: 5,
                preauth: 6
            }[ activity_name.toLowerCase()] || 99
        - disabled: false
          name: category_uid
          value: "3"
        - disabled: false
          name: class_uid
          value: "3002"
        - disabled: false
          name: severity_id
          value: /* guessing info level */ 1
        - disabled: false
          name: type_uid
          value: class_uid * 100 + activity_id
  - id: eval
    filter: "true"
    disabled: null
    conf: {}
    final: true
    description: DEBUG - STOP HERE
description: Convert user authentication logs to OCSF schema
